<% include partials/header %>


<head>

	<title>Route Map</title>
	<style >
		#map{
			height: 400px;
			width: 100%;
		}
	</style>
</head>
<body>
	<div class="container">
	<h1>Route Map</h1>
	<div id ='map'></div>
	<br>
	<div class="container">
		<div class="summaryPanel"></div>
	</div>
	</div>
	<script src='https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY'></script>
	<script type="text/javascript">
	function watch(ref, data) {
		console.log(ref+"\n");
		console.log(data);
	}

	var stringfyData = '<%- JSON.stringify(data) %>'
	var finalParsedData = JSON.parse(stringfyData);
	var deliveryPoints = new Array();
	var directionsDisplay;
	var directionService;
	var currentPosition = new google.maps.LatLng(28.9845, 77.7064);
	var dPoints= new Array();
	finalParsedData.forEach(function(ele){
		var temp = new google.maps.LatLng(parseFloat(ele.latitude), parseFloat(ele.longitude));

		deliveryPoints.push(temp);
	});
	finalParsedData.forEach(function(ele){
		var temp =
				{
					latLng: new google.maps.LatLng(parseFloat(ele.latitude), parseFloat(ele.longitude)),
					title: ele.customeraddress
				}
		dPoints.push(temp);
	});

	watch("deliveryPoints", deliveryPoints)
	function initialize() {
		directionsService = new google.maps.DirectionsService();
		directionsDisplay = new google.maps.DirectionsRenderer;
		var mapOptions = {
			zoom: 10,
			center: currentPosition
		};
		map = new google.maps.Map(document.getElementById('map'), mapOptions);
		directionsDisplay.setMap(map);
		var marker = new google.maps.Marker({
			position: currentPosition,
			map: map,
			title: 'Currrent location'
		});
		var i = dPoints.length;
		while (i--) {
			dPoints[i].marker = new google.maps.Marker({
				position: dPoints[i].latLng,
				map: map,
				title: dPoints[i].title,
				icon: 'https://maps.google.com/mapfiles/ms/icons/green.png'
			});
		}
		findFarthest();
	}
	function sendBack(request,i) {
		const returnValue = new Promise((resolve, reject) => {
			directionsService.route(request, function(response, status) {
				if(status == google.maps.DirectionsStatus.OK) {
						resolve(response.routes[0].legs[0].distance.value);
					}
				else {
					reject("Error");
				}
			});
		});

		return returnValue;
	}
	async function findFarthest() {
		var farthestIndex, i = 0, longest = 0,index;
		while(i<deliveryPoints.length) {
			var point  = deliveryPoints[i];
			var request = {
				origin: currentPosition,
				destination: point,
				travelMode: google.maps.DirectionsTravelMode.DRIVING
			};
			farthestIndex = await sendBack(request, i)
			if(longest<parseInt(farthestIndex)) {
				longest = parseInt(farthestIndex);
				index = i;
			}
			i++;
		}
		displayRoute(index)
	}
	function displayRoute(index) {
		endPoint = deliveryPoints[index];
		waypts = [];
		for(let i=0;i<deliveryPoints.length; i++) {
			if(i!==index) {

				waypts.push({
					location: deliveryPoints[i],
					stopover: true
				});
			}
		}
		directionsService.route({
			origin: currentPosition,
			destination: endPoint,
			waypoints: waypts,
			optimizeWaypoints: true,
			travelMode: 'DRIVING'
		},function(response, status){
				if (status === 'OK') {
					directionsDisplay.setDirections(response);
					var route = response.routes[0];
					var summaryPanel = document.querySelector('.summaryPanel')
					summaryPanel.innerHTML = '';
					for (var i = 0; i < route.legs.length; i++) {
						var routeSegment = i + 1;
						summaryPanel.innerHTML += '<h3>Route Segment: ' + routeSegment +
								'</h3><br>';
						summaryPanel.innerHTML += route.legs[i].start_address + ' <b>to</b> ';
						summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
						summaryPanel.innerHTML += route.legs[i].distance.text + '<br><hr>';

					}
				}
			});
	}
	initialize(28.9845,77.7064);
	</script>

</body>
</html>
